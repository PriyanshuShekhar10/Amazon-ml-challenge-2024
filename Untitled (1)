{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM89RjuY0BPd56+d1pPrd72"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"GTSOX19ttxyc","executionInfo":{"status":"ok","timestamp":1726337319801,"user_tz":-330,"elapsed":495,"user":{"displayName":"Nalin","userId":"12386870817090352164"}},"outputId":"9fcc3026-9f9e-4f2c-d2f4-c1c457080d7b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_332a87e6-62e6-4604-b308-6080f4564e57\", \"batch_1.csv\", 476423)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_e3773b46-85f7-4fa0-8e6b-e90067fa22ef\", \"batch_2.csv\", 194726)"]},"metadata":{}}],"source":["# prompt: split this csv into batches of 5000 /content/maximum_weight_recommendation.csv and download\n","\n","import pandas as pd\n","import math\n","\n","def split_csv(file_path, batch_size):\n","  \"\"\"\n","  Splits a CSV file into batches of a specified size.\n","\n","  Args:\n","    file_path: Path to the CSV file.\n","    batch_size: Size of each batch.\n","  \"\"\"\n","  df = pd.read_csv(file_path)\n","  total_rows = len(df)\n","  num_batches = math.ceil(total_rows / batch_size)\n","\n","  for i in range(num_batches):\n","    start_index = i * batch_size\n","    end_index = min((i + 1) * batch_size, total_rows)\n","    batch_df = df[start_index:end_index]\n","    batch_filename = f\"batch_{i+1}.csv\"\n","    batch_df.to_csv(batch_filename, index=False)\n","    # Download the batch file\n","    from google.colab import files\n","    files.download(batch_filename)\n","\n","# Replace with your file path and desired batch size\n","split_csv('/content/maximum_weight_recommendation.csv', 5000)\n"]},{"cell_type":"code","source":[],"metadata":{"id":"RAboaRJbuFko"},"execution_count":null,"outputs":[]}]}